0.  A made up word, used as an example of a long word for the dictionary. 
1.  getrusage "returns resource usage measures for 'who.'" Here, we are looking at statistics for the calling process.  
2.  16.
3.  Because the file was used in multiple functions and each of those functions needed to be counted at the time they were called. 
4.  The for loop executes by grabbing characters from the text file, ensuring that these are indeed words and not non-alphabetical characters and that the end of file has not been reached. The loop then passes these characters to the check function.
5.  Because you wanted to check a word one character at a time, fscan would have only looked for white space. 
6.  In order to refuse manipulation by users who are filling in dictionary.c.
7.  I used a hashtable for the load function, a while loop for check, and a for/while loop for unload. 
8.  It was actually fairly fast. Total time ~.19. 
9.  I adjusted the size of my hashtable, larger and smaller, and found that a large--but not too large--file was best. This cut down a few seconds. I also tried to adjust my hash function, but this only increased the time. I also noticed that permitting memory leaks increased my time, though I tried to avoid this as much as possible.
10. A major bottleneck is the check function. Because I had to copy the passed word and then check that word against my hashtable, I couldn't get to a simple check function. To solve this, I could have used a trie, but of course loading the trie would then be my bottleneck. 
